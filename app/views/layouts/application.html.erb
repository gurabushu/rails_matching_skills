<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "スキマッチ" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

    <%# Includes all stylesheet files in app/assets/stylesheets %>
    <%= stylesheet_link_tag :app, "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
  </head>

  <body>
   
    <!-- Flash Messages -->
    <% if notice %>
      <div class="alert alert-success alert-dismissible fade show" role="alert">
        <%= notice %>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      </div>
    <% end %>
    <% if alert %>
      <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <%= alert %>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      </div>
    <% end %>
    
    <!-- Main Content -->
    <div style="margin-bottom: 50px;">
      <%= yield %>
    </div>
    
    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- 統計データ読み込み -->
    <script>
      let statsLoaded = false;
      
      function loadStatsData() {
        console.log('統計データ読み込み開始');
        
        // キャッシュを回避するためのタイムスタンプを追加
        const timestamp = new Date().getTime();
        fetch('/match_stats.json?t=' + timestamp)
          .then(response => {
            console.log('Response status:', response.status);
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(data => {
            console.log('統計データ取得成功:', data);
            
            // ヘッダーの統計情報（ログイン時）
            const totalUsers = document.getElementById('total-users');
            const matchRate = document.getElementById('match-rate');
            const totalMatches = document.getElementById('total-matches');
            const successRate = document.getElementById('success-rate');
            
            if (totalUsers) {
              totalUsers.textContent = data.total_users || 0;
              console.log('ヘッダー統計更新: total_users =', data.total_users);
            }
            if (matchRate) matchRate.textContent = (data.match_rate || 0) + '%';
            if (totalMatches) totalMatches.textContent = data.total_matches || 0;
            if (successRate) successRate.textContent = (data.success_rate || 0) + '%';
            
            // ランディングページの統計情報（ログアウト時）
            const totalUsersLanding = document.getElementById('total-users-landing');
            const matchRateLanding = document.getElementById('match-rate-landing');
            const totalMatchesLanding = document.getElementById('total-matches-landing');
            const successRateLanding = document.getElementById('success-rate-landing');
            
            if (totalUsersLanding) {
              totalUsersLanding.textContent = data.total_users || 0;
              console.log('ランディング統計更新: total_users =', data.total_users);
            }
            if (matchRateLanding) matchRateLanding.textContent = (data.match_rate || 0) + '%';
            if (totalMatchesLanding) totalMatchesLanding.textContent = data.total_matches || 0;
            if (successRateLanding) successRateLanding.textContent = (data.success_rate || 0) + '%';
            
            statsLoaded = true;
          })
          .catch(error => {
            console.error('統計データの読み込みに失敗しました:', error);
            // フォールバック: デフォルト値を表示
            const elements = [
              'total-users', 'match-rate', 'total-matches', 'success-rate',
              'total-users-landing', 'match-rate-landing', 'total-matches-landing', 'success-rate-landing'
            ];
            elements.forEach(id => {
              const element = document.getElementById(id);
              if (element && element.textContent === '-') {
                if (id.includes('rate')) {
                  element.textContent = '0%';
                } else {
                  element.textContent = '0';
                }
              }
            });
          });
      }
      
      document.addEventListener('DOMContentLoaded', function() {
        loadStatsData();
        
        // フラッシュメッセージで統計データ更新完了を検知したら再読み込み
        checkForStatsUpdate();
      });
      
      // 統計データ更新のチェック機能
      function checkForStatsUpdate() {
        const flashMessages = document.querySelectorAll('.alert');
        flashMessages.forEach(function(message) {
          if (message.textContent.includes('統計データを更新しました')) {
            console.log('統計データ更新メッセージを検知、データを再読み込みします');
            setTimeout(function() {
              loadStatsData();
            }, 500); // 0.5秒後に再読み込み（短縮）
          }
        });
        
        // URLパラメータからも統計データ更新を検知
        if (window.location.search.includes('stats_updated=true')) {
          console.log('URLパラメータから統計データ更新を検知');
          loadStatsData();
        }
      }
      
      // ページが表示された時（戻るボタンなど）にも再読み込み
      window.addEventListener('pageshow', function(event) {
        if (event.persisted || !statsLoaded) {
          loadStatsData();
        }
      });
      
      // デバッグ用：手動でStats更新をテストする関数（コンソールで実行可能）
      window.forceStatsReload = function() {
        console.log('手動統計データ再読み込み実行');
        statsLoaded = false;
        loadStatsData();
      };
      
      // Turbo/form送信後にも統計データを再読み込み
      document.addEventListener('turbo:load', function() {
        if (!statsLoaded) {
          loadStatsData();  
        }
        checkForStatsUpdate();
      });
    </script>
  </body>
</html>
