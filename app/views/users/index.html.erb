<% unless user_signed_in? %>
 <div class="hero-description">
  <h1>TecConnect - エンジニア同士がスキルや趣味で繋がれるマッチングサービス</h1>
 
    <p><strong>同じ技術に興味を持つエンジニア仲間と出会おう</strong></p>
    <p>技術的な話ができる仲間、一緒に勉強会に参加する仲間、<br>
      新しいプロジェクトを始める仲間を見つけられるプラットフォームです</p>
    <div class="tech-highlights">
      <span class="connect-tag">エンジニア仲間</span>
      <span class="connect-tag">技術談話</span>
      <span class="connect-tag">一緒に学習</span>
      <span class="connect-tag">プロジェクト仲間</span>
      <span class="connect-tag">カフェ会</span>
      <span class="connect-tag">勉強会仲間</span>
    </div>
  </div>
<% end %>

<!-- ナビゲーション -->
<% unless user_signed_in? %>
  <div class="navigation">
    <p>技術スキルを共有し、エンジニア仲間とのネットワークを広げよう</p>
    <div class="auth-actions">
      <%= link_to "ログイン", new_user_session_path, class: "btn btn-primary" %>
      <%= link_to "新規登録", new_user_registration_path, class: "btn btn-success" %>
      <%= button_to "ゲストログイン", users_guest_sign_in_path, method: :post, 
                    class: "btn btn-info",
                    form: { style: "display: inline-block;" } %>
    </div>
  </div>
<% else %>
  <!-- ログイン後のユーザーナビゲーション -->
  <div class="user-navigation">
    <div class="user-welcome">
      <p>こんにちは、<strong><%= current_user.name || current_user.email %></strong>さん</p>
    </div>
    
    <div class="user-menu-container">
      <div class="user-dropdown">
        <button class="user-menu-button" type="button">
          <span class="user-avatar">
            <img src="<%= current_user.avatar_url(:nav) %>" alt="<%= current_user.name %>のアバター" class="nav-avatar">
          </span>
          <span class="user-name"><%= current_user.name || "エンジニア" %></span>
          <span class="dropdown-arrow">▼</span>
        </button>
        
        <div class="user-dropdown-menu">
          <%= link_to "プロフィール編集", edit_user_registration_path, class: "dropdown-item" %>
          <%= link_to "マイプロフィール", user_path(current_user), class: "dropdown-item" %>
          <%= link_to "マッチング一覧", matches_path, class: "dropdown-item" %>
          <%= link_to "チャット", chat_rooms_path, class: "dropdown-item" %>
          <div class="dropdown-divider"></div>
          <%= button_to "ログアウト", destroy_user_session_path, 
                        method: :delete, 
                        class: "dropdown-item logout-btn",
                        data: { confirm: "ログアウトしますか？" } %>
        </div>
      </div>
    </div>
  </div>
<% end %>

<!-- ユーザー一覧 -->
<section class="users-list">
  <h2>繋がれるユーザー一覧</h2>
  
  <!-- 検索・フィルターフォーム -->
  <div class="search-section">
    <%= form_with url: root_path, method: :get, local: true, 
                  class: "search-form", 
                  data: { controller: "search", search_target: "form" } do |f| %>
      <div class="search-row">
        <div class="search-field">
          <%= f.text_field :search, 
                          placeholder: "名前、技術、趣味などから検索（一緒に学習したい技術や共通の趣味）...", 
                          value: params[:search],
                          class: "search-input",
                          data: { search_target: "input", action: "keydown->search#submitOnEnter" } %>
        </div>
        
        <div class="filter-field">
          <%= f.select :skill_filter, 
                      options_for_select([['すべての技術', '']] + 
                      @available_skills.map { |skill| [skill, skill] }, 
                      params[:skill_filter]),
                      {}, 
                      { class: "skill-filter hover-dropdown" } %>
        </div>
        
        <div class="sort-field">
          <%= f.select :sort, 
                      options_for_select([
                        ['新しい順', 'newest'],
                        ['古い順', 'oldest'], 
                        ['名前順', 'name'],
                        ['スキル順', 'skill']
                      ], params[:sort]),
                      {}, 
                      { class: "sort-select hover-dropdown" } %>
        </div>
        
        <div class="search-buttons">
          <%= f.submit "検索", class: "btn btn-primary search-btn" %>
          <%= link_to "クリア", root_path, class: "btn btn-secondary clear-btn",
                      data: { action: "click->search#clear" } %>
        </div>
      </div>
    <% end %>
    
    <!-- 検索結果の表示 -->
    <div class="search-results-info">
      <% if params[:search].present? || params[:skill_filter].present? %>
        <p class="search-info">
          <% if params[:search].present? %>
            「<strong><%= params[:search] %></strong>」で検索
          <% end %>
          <% if params[:skill_filter].present? %>
            <% if params[:search].present? %> / <% end %>
            スキル「<strong><%= params[:skill_filter] %></strong>」でフィルター
          <% end %>
          - <strong><%= @users.count %></strong>件見つかりました
        </p>
      <% else %>
        <p class="total-info">全<strong><%= @users.count %></strong>件のユーザー</p>
      <% end %>
    </div>
  </div>
  
  <% if @users.any? %>
    <div class="users-grid">
      <% @users.each do |user| %>
        <div class="user-card" data-user-id="<%= user.id %>">
          <div class="user-card-header">
            <div class="user-avatar-small">
              <img src="<%= user.avatar_url(:small) %>" alt="<%= user.name %>のアバター" class="avatar-small">
            </div>
            <div class="user-basic-info">
              <% if user.name.present? %>
                <h3><%= link_to user.name, user_path(user), class: "user-name-link" %></h3>
              <% end %>
              
              <% if user.skill.present? %>
                <p class="skill"><strong>スキル:</strong> <%= user.skill %></p>
              <% else %>
                <p class="skill no-skill"><strong>スキル:</strong> 未設定</p>
              <% end %>
            </div>
          </div>
          
          <% if user.description.present? %>
            <p class="description"><%= truncate(user.description, length: 100) %></p>
          <% else %>
            <p class="description no-description">自己紹介未設定</p>
          <% end %>
          
          <% if user.hobbies.present? %>
            <p class="hobbies"><strong>趣味:</strong> <%= truncate(user.hobbies, length: 80) %></p>
          <% end %>
          
          <!-- AI相性診断 -->
          <% if user_signed_in? && user != current_user %>
            <div class="ai-compatibility-section" data-user-id="<%= user.id %>">
              <button class="btn btn-ai-diagnose" onclick="showCompatibilityScore(this, <%= user.id %>)">
                <i class="ai-icon">🤖</i>
                AI診断を見る
              </button>
              
              <div class="compatibility-score compatibility-unknown" style="display: none;">
                <div class="compatibility-header">
                  <i class="ai-icon">🤖</i>
                  <span class="compatibility-label">AI相性診断結果</span>
                </div>
                <div class="compatibility-details">
                  <span class="score-loading">分析中...</span>
                </div>
              </div>
            </div>
          <% end %>
          
          <p class="created-at">登録日: <%= user.created_at.strftime("%Y年%m月%d日") %></p>
          
          <div class="user-actions">
            <%= link_to "詳細を見る", user_path(user), class: "btn btn-outline btn-sm" %>
            
            <!-- マッチングボタン -->
            <% if user_signed_in? && user != current_user %>
              <div class="match-actions">
                <% case current_user.match_status_with(user) %>
                <% when :matched %>
                  <span class="match-status matched">
                    ✨ マッチ済み
                  </span>
                <% when :sent_pending %>
                  <span class="match-status pending">
                    つながり申請送信済み
                  </span>
                  <%= button_to "取り消す", destroy_match_path(user), 
                              method: :delete, 
                              class: "btn btn-outline-secondary btn-sm",
                              data: { confirm: "つながり申請を取り消しますか？" } %>
                <% when :received_pending %>
                  <span class="match-status received">
                    つながり申請が届いています
                  </span>
                <% else %>
                  <%= button_to "つながる", create_match_path(user), 
                              method: :post, 
                              class: "btn btn-primary btn-sm match-btn" %>
                <% end %>
              </div>
            <% end %>
          </div>
        </div>
      <% end %>
    </div>
  <% else %>
    <div class="no-results">
      <% if params[:search].present? || params[:skill_filter].present? %>
        <p class="no-results-message">
          検索条件に一致するユーザーが見つかりませんでした。
        </p>
        <p class="no-results-suggestion">
          別のキーワードで検索するか、フィルターを変更してお試しください。
        </p>
      <% else %>
        <p class="no-users">まだエンジニアが登録されていません。最初のエンジニアになって、コミュニティを始めませんか？</p>
      <% end %>
    </div>
  <% end %>
</section>

<!-- プルダウンメニュー用のCSS・JavaScript -->
<style>
/* エンジニア向けヒーローセクション */
.hero-description {
  text-align: center;
  padding: 30px 20px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border-radius: 15px;
  margin-bottom: 30px;
  box-shadow: 0 8px 32px rgba(102, 126, 234, 0.3);
}

.hero-description p {
  margin: 10px 0;
  font-size: 18px;
  line-height: 1.6;
}

.hero-description p:first-child {
  font-size: 24px;
  font-weight: 600;
  margin-bottom: 20px;
}

.tech-highlights {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  gap: 12px;
  margin-top: 25px;
}

.connect-tag {
  background: rgba(255, 255, 255, 0.2);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.3);
  color: white;
  padding: 8px 16px;
  border-radius: 25px;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.3s ease;
}

.tech-tag:hover {
  background: rgba(255, 255, 255, 0.3);
  transform: translateY(-2px);
}
/* 人気スキル表示 */
.popular-skills-section {
  margin: 20px 0;
  padding: 20px;
  background: white;
  border-radius: 12px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.popular-skills-section h3 {
  margin-bottom: 15px;
  color: #333;
  font-size: 18px;
  font-weight: 600;
}

.skills-list {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.skill-item {
  display: flex;
  align-items: center;
  padding: 12px;
  background: #f8f9fa;
  border-radius: 8px;
  transition: all 0.2s ease;
}

.skill-item:hover {
  background: #e9ecef;
}

.skill-item .rank {
  font-weight: bold;
  color: #495057;
  min-width: 40px;
}

.skill-item .skill-name {
  flex: 1;
  font-weight: 500;
  color: #333;
  margin-left: 10px;
}

.skill-item .skill-count {
  font-size: 14px;
  color: #6c757d;
  background: #dee2e6;
  padding: 4px 8px;
  border-radius: 12px;
}

/* ログイン後のユーザーナビゲーション */
.user-navigation {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 15px 20px;
  border-radius: 12px;
  margin-bottom: 20px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.user-welcome p {
  margin: 0;
  font-size: 16px;
  font-weight: 500;
}

/* ユーザードロップダウンメニュー */
.user-menu-container {
  position: relative;
}

.user-dropdown {
  position: relative;
  display: inline-block;
}

.user-menu-button {
  background: rgba(255, 255, 255, 0.2);
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 25px;
  color: white;
  padding: 8px 16px;
  font-size: 14px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 8px;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
}

.user-menu-button:hover {
  background: rgba(255, 255, 255, 0.3);
  border-color: rgba(255, 255, 255, 0.5);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(255, 255, 255, 0.2);
}

.user-avatar {
  font-size: 18px;
  background: rgba(255, 255, 255, 0.2);
  padding: 4px 8px;
  border-radius: 50%;
}

.user-name {
  font-weight: 500;
  max-width: 120px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.dropdown-arrow {
  transition: transform 0.3s ease;
  font-size: 12px;
}

/* プルダウンメニューの表示/非表示 */
.user-dropdown-menu {
  position: absolute;
  top: calc(100% + 10px);
  right: 0;
  background: white;
  border-radius: 12px;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  min-width: 220px;
  opacity: 0;
  visibility: hidden;
  transform: translateY(-10px);
  transition: all 0.3s ease;
  z-index: 1000;
  border: 1px solid rgba(0, 0, 0, 0.1);
}

/* ホバー時にメニューを表示 */
.user-dropdown:hover .user-dropdown-menu {
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
}

.user-dropdown:hover .dropdown-arrow {
  transform: rotate(180deg);
}

/* メニューアイテムのスタイル */
.dropdown-item {
  display: block;
  padding: 12px 18px;
  color: #333;
  text-decoration: none;
  font-size: 14px;
  transition: all 0.2s ease;
  border: none;
  background: none;
  width: 100%;
  text-align: left;
  cursor: pointer;
}

.dropdown-item:hover {
  background: #f8f9fa;
  color: #007bff;
  transform: translateX(5px);
}

.dropdown-item:first-child {
  border-radius: 12px 12px 0 0;
}

.dropdown-item:last-child {
  border-radius: 0 0 12px 12px;
}

.dropdown-divider {
  height: 1px;
  background: #e9ecef;
  margin: 8px 0;
}

.logout-btn {
  color: #dc3545 !important;
  font-weight: 500;
}

.logout-btn:hover {
  background: rgba(220, 53, 69, 0.1) !important;
  color: #dc3545 !important;
}

/* ホバー対応プルダウンメニューのスタイル */
.hover-dropdown {
  position: relative;
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  background: white;
  border: 2px solid #ddd;
  border-radius: 8px;
  padding: 10px 35px 10px 15px;
  font-size: 14px;
  cursor: pointer;
  transition: all 0.3s ease;
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
  background-position: right 10px center;
  background-repeat: no-repeat;
  background-size: 16px;
}

.hover-dropdown:hover {
  border-color: #007bff;
  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
  transform: translateY(-2px);
}

.hover-dropdown:focus {
  outline: none;
  border-color: #007bff;
  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
}

/* プルダウン選択時のエフェクト */
.hover-dropdown option {
  padding: 10px;
  background: white;
  color: #333;
}

.hover-dropdown option:hover {
  background: #f8f9fa;
}

/* フィールドコンテナのホバーエフェクト */
.filter-field, .sort-field {
  position: relative;
  transition: transform 0.2s ease;
}

.filter-field:hover, .sort-field:hover {
  transform: translateY(-1px);
}

/* ホバー時の視覚的フィードバック */
.filter-field:hover .hover-dropdown,
.sort-field:hover .hover-dropdown {
  border-color: #28a745;
  box-shadow: 0 4px 12px rgba(40, 167, 69, 0.15);
}

/* ユーザーカードのアバター表示スタイル */
.user-card-header {
  display: flex;
  align-items: flex-start;
  gap: 12px;
  margin-bottom: 12px;
}

.user-avatar-small {
  flex-shrink: 0;
}

.avatar-small {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #e1e5e9;
}

.user-basic-info {
  flex: 1;
}

.user-basic-info h3 {
  margin: 0 0 6px 0;
}

.user-basic-info .skill {
  margin: 0;
}

/* ナビゲーション用アバタースタイル */
.nav-avatar {
  width: 30px;
  height: 30px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #ddd;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM loaded, setting up hover dropdown event listeners');
  
  // ユーザードロップダウンメニューの設定
  const userDropdown = document.querySelector('.user-dropdown');
  if (userDropdown) {
    console.log('User dropdown found');
    
    const menuButton = userDropdown.querySelector('.user-menu-button');
    const dropdownMenu = userDropdown.querySelector('.user-dropdown-menu');
    
    if (menuButton && dropdownMenu) {
      // マウスオーバー時の追加エフェクト
      userDropdown.addEventListener('mouseenter', function() {
        console.log('User dropdown hovered');
        menuButton.style.transform = 'translateY(-2px) scale(1.05)';
      });
      
      userDropdown.addEventListener('mouseleave', function() {
        console.log('User dropdown mouse left');
        menuButton.style.transform = 'translateY(0) scale(1)';
      });
      
      // クリック以外の場所をクリックしたときにメニューを閉じる
      document.addEventListener('click', function(event) {
        if (!userDropdown.contains(event.target)) {
          dropdownMenu.style.opacity = '0';
          dropdownMenu.style.visibility = 'hidden';
          dropdownMenu.style.transform = 'translateY(-10px)';
        }
      });
    }
  }
  
  // スキルフィルターのプルダウン（選択時に送信）
  const skillFilter = document.querySelector('.skill-filter');
  if (skillFilter) {
    console.log('Skill filter found');
    skillFilter.addEventListener('change', function() {
      console.log('Skill filter changed to:', this.value);
      // 少し遅延を入れてユーザビリティを向上
      setTimeout(() => {
        this.form.submit();
      }, 300);
    });
    
    // ホバー時の視覚的フィードバック
    skillFilter.addEventListener('mouseenter', function() {
      this.style.cursor = 'pointer';
    });
  }
  
  // ソートのプルダウン（選択時に送信）
  const sortSelect = document.querySelector('.sort-select');
  if (sortSelect) {
    console.log('Sort select found');
    sortSelect.addEventListener('change', function() {
      console.log('Sort changed to:', this.value);
      // 少し遅延を入れてユーザビリティを向上
      setTimeout(() => {
        this.form.submit();
      }, 300);
    });
    
    // ホバー時の視覚的フィードバック
    sortSelect.addEventListener('mouseenter', function() {
      this.style.cursor = 'pointer';
    });
  }
});

// Turbo対応
document.addEventListener('turbo:load', function() {
  console.log('Turbo loaded, re-setting up hover dropdown event listeners');
  
  // ユーザードロップダウンの再設定
  const userDropdown = document.querySelector('.user-dropdown');
  if (userDropdown && !userDropdown.dataset.listenerAdded) {
    const menuButton = userDropdown.querySelector('.user-menu-button');
    const dropdownMenu = userDropdown.querySelector('.user-dropdown-menu');
    
    if (menuButton && dropdownMenu) {
      userDropdown.addEventListener('mouseenter', function() {
        menuButton.style.transform = 'translateY(-2px) scale(1.05)';
      });
      
      userDropdown.addEventListener('mouseleave', function() {
        menuButton.style.transform = 'translateY(0) scale(1)';
      });
      
      userDropdown.dataset.listenerAdded = 'true';
    }
  }
  
  const skillFilter = document.querySelector('.skill-filter');
  if (skillFilter && !skillFilter.dataset.listenerAdded) {
    skillFilter.addEventListener('change', function() {
      console.log('Skill filter changed (turbo):', this.value);
      setTimeout(() => {
        this.form.submit();
      }, 300);
    });
    
    skillFilter.addEventListener('mouseenter', function() {
      this.style.cursor = 'pointer';
    });
    
    skillFilter.dataset.listenerAdded = 'true';
  }
  
  const sortSelect = document.querySelector('.sort-select');
  if (sortSelect && !sortSelect.dataset.listenerAdded) {
    sortSelect.addEventListener('change', function() {
      console.log('Sort changed (turbo):', this.value);
      setTimeout(() => {
        this.form.submit();
      }, 300);
    });
    
    sortSelect.addEventListener('mouseenter', function() {
      this.style.cursor = 'pointer';
    });
    
    sortSelect.dataset.listenerAdded = 'true';
  }
});
</script>
